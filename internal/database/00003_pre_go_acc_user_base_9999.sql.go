// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00003_pre_go_acc_user_base_9999.sql

package database

import (
	"context"
	"database/sql"
)

const getAccUserByAccount = `-- name: GetAccUserByAccount :one
SELECT user_id, user_account, user_email, user_state, user_mobile,
user_is_authentication from ` + "`" + `pre_go_acc_user_9999` + "`" + `
where user_account = ?
`

type GetAccUserByAccountRow struct {
	UserID               uint64
	UserAccount          string
	UserEmail            sql.NullString
	UserState            uint8
	UserMobile           sql.NullString
	UserIsAuthentication uint8
}

func (q *Queries) GetAccUserByAccount(ctx context.Context, userAccount string) (GetAccUserByAccountRow, error) {
	row := q.db.QueryRowContext(ctx, getAccUserByAccount, userAccount)
	var i GetAccUserByAccountRow
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserEmail,
		&i.UserState,
		&i.UserMobile,
		&i.UserIsAuthentication,
	)
	return i, err
}

const getAccUserByUserEmail = `-- name: GetAccUserByUserEmail :one
SELECT user_id, user_account, user_email, user_state, user_mobile,
user_is_authentication from ` + "`" + `pre_go_acc_user_9999` + "`" + `
where user_email = ?
`

type GetAccUserByUserEmailRow struct {
	UserID               uint64
	UserAccount          string
	UserEmail            sql.NullString
	UserState            uint8
	UserMobile           sql.NullString
	UserIsAuthentication uint8
}

func (q *Queries) GetAccUserByUserEmail(ctx context.Context, userEmail sql.NullString) (GetAccUserByUserEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getAccUserByUserEmail, userEmail)
	var i GetAccUserByUserEmailRow
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserEmail,
		&i.UserState,
		&i.UserMobile,
		&i.UserIsAuthentication,
	)
	return i, err
}

const getAccUserByUserId = `-- name: GetAccUserByUserId :one
SELECT user_id, user_account, user_email, user_state, user_mobile,
user_is_authentication from ` + "`" + `pre_go_acc_user_9999` + "`" + `
where user_id = ?
`

type GetAccUserByUserIdRow struct {
	UserID               uint64
	UserAccount          string
	UserEmail            sql.NullString
	UserState            uint8
	UserMobile           sql.NullString
	UserIsAuthentication uint8
}

func (q *Queries) GetAccUserByUserId(ctx context.Context, userID uint64) (GetAccUserByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAccUserByUserId, userID)
	var i GetAccUserByUserIdRow
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserEmail,
		&i.UserState,
		&i.UserMobile,
		&i.UserIsAuthentication,
	)
	return i, err
}

const insertAccUser = `-- name: InsertAccUser :exec
INSERT INTO pre_go_acc_user_9999 (
    user_account, 
    user_nickname, 
    user_avatar, 
    user_state, 
    user_mobile,
    user_gender,
    user_birthday,
    user_email,
    user_is_authentication,
    created_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
`

type InsertAccUserParams struct {
	UserAccount          string
	UserNickname         sql.NullString
	UserAvatar           sql.NullString
	UserState            uint8
	UserMobile           sql.NullString
	UserGender           sql.NullInt16
	UserBirthday         sql.NullTime
	UserEmail            sql.NullString
	UserIsAuthentication uint8
}

func (q *Queries) InsertAccUser(ctx context.Context, arg InsertAccUserParams) error {
	_, err := q.db.ExecContext(ctx, insertAccUser,
		arg.UserAccount,
		arg.UserNickname,
		arg.UserAvatar,
		arg.UserState,
		arg.UserMobile,
		arg.UserGender,
		arg.UserBirthday,
		arg.UserEmail,
		arg.UserIsAuthentication,
	)
	return err
}
